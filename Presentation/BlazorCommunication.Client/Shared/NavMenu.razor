@using System.Security.Claims
@using BlazorCommunication.Client.Services.AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<nav class="navbar navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow mb-3">
    <div class="container">
        <a href="" class="navbar-brand text-success">Blazor Communication</a>
        <div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">
            <ul class="navbar-nav">
                @if (!isAuthenticated)
                {
                    <li class="nav-item">
                        <a href="login" class="nav-link text-success">Login</a>
                    </li>
                    <li class="nav-item">
                        <a href="register" class="nav-link text-success">Register</a>
                    </li>
                }
                else
                {
                    <li class="nav-item">
                        <a href="" class="nav-link text-success">@userEmail</a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="nav-link text-success" @onclick="Logout">Logout</a>
                    </li>
                }
            </ul>
            <ul class="navbar-nav flex-grow-1">
                @if (isAuthenticated)
                {
                    <li class="nav-item">
                        <a href="users" class="nav-link text-success">Users</a>
                    </li>
                    <li class="nav-item">
                        <a href="chat" class="nav-link text-success">Chat</a>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>

@code {
    private bool isAuthenticated;
    private string userEmail;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity.IsAuthenticated;
        var name = user.Identity.Name;
        if (isAuthenticated)
        {
            userEmail = user.FindFirst(c => c.Type == "email")?.Value;
        }
    }

    private async Task Logout()
    {
        await AuthService.Logout();
        NavigationManager.NavigateTo("", true);
    }
}